"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.solveCaptcha = void 0;
const axios_1 = __importDefault(require("axios"));
const images_1 = require("./images");
const target_1 = require("./target");
const type_1 = require("./type");
const utils_1 = require("./utils");
/**
 * Solve captchas using `nocaptchaai.com` API service
 *
 * @param page - Puppeteer page instance
 * @param apiKey - API key
 * @param uid - UID
 * @param type - `free` or `pro`
 * @param debug - true or false
 */
const solveCaptcha = async (page, apiKey, uid, type, debug) => {
    const outer = await page.waitForSelector('iframe[data-hcaptcha-response]');
    const outerFrame = await outer?.contentFrame();
    const inner = await page.waitForSelector('iframe:not([data-hcaptcha-response])');
    const innerFrame = await inner?.contentFrame();
    if (!outerFrame)
        throw new Error('solveCaptcha: captcha outer frame not found');
    if (!innerFrame)
        throw new Error('solveCaptcha: captcha inner frame not found');
    const checkbox = await outerFrame.waitForSelector('#checkbox');
    if (!(await innerFrame.$('.challenge')))
        await checkbox?.click();
    // await sleep(500000); // debug waiting
    try {
        // const language = await page.evaluate(() => document.documentElement.lang); // doesn't work
        const language = await innerFrame.evaluate(() => document.documentElement.lang);
        if (debug)
            console.log('üåç Language found = ', language);
        const sitekey = (0, utils_1.findURLParam)(new URLSearchParams(innerFrame.url()), key => key.includes('sitekey'))[1];
        await innerFrame.waitForSelector('.challenge-container', { timeout: 10 * 1000 });
        while ((await outerFrame.$('#checkbox[aria-checked=false]')) !== null) {
            const images = await (0, images_1.getImages)(innerFrame);
            if (debug && images)
                console.log('üîç Puzzle Images found');
            const target = await (0, target_1.getTarget)(innerFrame);
            if (debug && target)
                console.log('üîç Target = ', target);
            const imageElements = await innerFrame.$$('.task-image');
            if (!imageElements)
                throw new Error('solveCaptcha: captcha images not found');
            const { data: query } = await axios_1.default.post((0, utils_1.getApiUrl)(type), {
                softid: 'pptr-pkg',
                method: 'hcaptcha_base64',
                site: page.url(),
                ln: language,
                sitekey,
                images,
                target
            }, {
                headers: {
                    'Content-type': 'application/json',
                    'apikey': apiKey,
                    'uid': uid
                }
            });
            switch (query.status) {
                case 'solved': {
                    console.log('‚úÖ', query.status);
                    console.log('---------‚úì---------');
                    for (const item of query.solution) {
                        await imageElements[item].click();
                        await (0, utils_1.sleep)((0, type_1.randTimer)(200, 350));
                        // await sleep(200);
                    }
                    break;
                }
                case 'new': {
                    if (debug)
                        console.log('‚è≥ waiting a second');
                    for (let i = 0; i < 10; i++) {
                        await (0, utils_1.sleep)(1000);
                        const { data: result } = await axios_1.default.get(query.url);
                        if (result.status === 'solved') {
                            if (debug)
                                console.log('üñ≤Ô∏è clicking images');
                            for (const item of result.solution) {
                                await imageElements[item].click();
                                await (0, utils_1.sleep)((0, type_1.randTimer)(200, 350));
                                // await sleep(200);
                            }
                            break;
                        }
                    }
                    break;
                }
                case 'skip': {
                    console.log('üò® Seems this a new challenge, please contact noCaptchaAi!');
                    console.error(query.message);
                    throw new Error('üò® Seems this a new challenge, please contact noCaptchaAi!');
                }
                case 'error': {
                    console.log('üò® Error');
                    console.error(query.message);
                    throw new Error('üò® Error');
                }
                default: {
                    console.log('üò® Unknown status');
                    console.error(query);
                    throw new Error('üò® Unknown status');
                }
            }
            const button = await innerFrame.$('.button-submit');
            if (debug)
                console.log('‚åõ waiting a second');
            await button?.click();
            await (0, utils_1.sleep)(1000);
        }
    }
    catch (err) {
        const isSolved = (await outerFrame.$('#checkbox[aria-checked=true]')) !== null;
        if (debug)
            console.log('‚òëÔ∏è  Seems puzzle solved');
        if (!isSolved)
            throw err;
        if (debug && !isSolved)
            console.log("‚ÅâÔ∏è couldn't solve");
    }
};
exports.solveCaptcha = solveCaptcha;
